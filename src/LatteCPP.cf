-- programs ------------------------------------------------

entrypoints Program ;

Prog.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

ClassDef. TopDef ::= "class" Ident "{" [ClassDecl] "}";

--- Extended Definiton --------------------------------------

ClassExtDef. TopDef ::= "class" Ident "extends" Ident "{" [ClassDecl] "}" ;

separator nonempty TopDef "" ;

Ar. 	   Arg ::= Type Ident;

separator  Arg "," ;

-- struct/classes ------------------------------------------

-- MethodDef. ClassDecl ::= TopDef ; -- We wont be able to create classes within classes---

MethodDef. ClassDecl ::= Type Ident "(" [Arg] ")" Block ;

FieldDef. ClassDecl ::= Type Ident ";" ;

separator nonempty ClassDecl "" ;

-- statements ----------------------------------------------

Blk.       Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

-- change to expr -------------------------- in these 3 places
-- before Ident-----------------------------------------------
Ass.       Stmt ::= Expr "=" Expr  ";" ;

Incr.      Stmt ::= Expr "++"  ";" ;

Decr.      Stmt ::= Expr "--"  ";" ;

---------------------------------------------------------------

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

--added-----------------------------------------------------

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

-- Types ---------------------------------------------------

-- Arrays --------------------------------------------------

Array.     Type ::= Type "[]";

-- Classes -------------------------------------------------

Class.     Type ::= Ident ;

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

ELitNull.  Expr6 ::= "null" ;

-- added ---------------------------------------------------

ArrAcc.    Expr6 ::= Expr6 "[" Expr "]" ;

EClass.    Expr6 ::= "new" Ident ;

-- EFieldGet. Expr6 ::= Expr6 "." Ident ;

EMethod.   Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;

------------------------------------------------------------

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

ENull.     Expr6 ::="(" Ident ")" "null" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

----Arrays--------------------------------------------------

NewArray.  Expr ::= "new" Type "[" Expr "]" ;

---Classes--------------------------------------------------

MemberAcc. Expr6 ::= Expr6 "." Ident ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

